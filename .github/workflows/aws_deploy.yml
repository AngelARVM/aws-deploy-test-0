name: Push to ECR

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SANDBOX }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID_SANDBOX }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPOSOTORY_NAME}}
          IMAGE_TAG: ${{secrets.AWS_ECR_REPOSOTORY_NAME}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new Image ID in the amazon ecs task definition with the newly built image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{secrets.AWS_ECS_TASK_DEFINITION}}
          container-name: ${{secrets.AWS_ECS_CONTAINER_NAME}}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{secrets.AWS_ECS_SERVICE_NAME }}
          cluster: ${{secrets.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
